{"version":3,"sources":["components/Table/index.ts","components/Table/Table.tsx","components/WhoMove/index.ts","components/WhoMove/WhoMove.tsx","components/SizeMatrix/index.ts","components/SizeMatrix/SizeMatrix.tsx","app/index.ts","app/App.tsx","index.js"],"names":["Table","props","rows","matrix","map","row","i","item","j","onClick","e","tdClick","statusGame","symbol","changeSymbol","changeMatrix","target","dataset","column","classList","length","add","WhoMove","text","typeCell","className","SizeMatrix","changeSizeMatrix","App","createMatrix","size","push","useState","sizeMatrix","setSizeMatrix","setMatrix","setStatusGame","setSymbol","checkResult","len","result","filter","cellNumber","paintCells","listCells","forEach","document","querySelectorAll","cell","style","backgroundColor","clearClassList","newMatrix","cloneMatrix","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21eb807d.chunk.js","sourcesContent":["import Table from \"./Table\";\r\nexport default Table;","import './Table.css';\r\n\r\ninterface IPropsTable {\r\n    matrix: string[][];\r\n    symbol: string;\r\n    statusGame: string;\r\n    changeMatrix: (i:number, j:number, symbol: string) => void;\r\n    changeSymbol: (item: string) => void;\r\n}\r\n\r\nconst Table = (props: IPropsTable): any => {\r\n\r\n    const rows = props.matrix.map((row, i) => {\r\n        return (\r\n            <tbody key={i}>\r\n                <tr key={i}>\r\n                {\r\n                    row.map((item, j) => {\r\n                        return (\r\n                            <td onClick={(e) => tdClick(e)}\r\n                                key={`${i}${j}`}\r\n                                data-row={i}\r\n                                data-column={j}\r\n                            ></td>\r\n                        )\r\n                    })\r\n                }\r\n                </tr>\r\n            </tbody>\r\n            \r\n        )\r\n    })\r\n\r\n    const tdClick = (e: React.MouseEvent): void => {\r\n        const {statusGame, symbol, changeSymbol, changeMatrix} = props;\r\n        if (statusGame === 'In progress') {\r\n            const target = e.target as HTMLElement;\r\n            const row = target.dataset.row as string;\r\n            const column = target.dataset.column as string;\r\n            if (target.classList.length === 0) {\r\n                if (symbol === 'X') {\r\n                    target.classList.add('crossCell')\r\n                    changeMatrix(+row, +column, symbol);\r\n                    changeSymbol('O')\r\n                } else {\r\n                    target.classList.add('circleCell')\r\n                    changeMatrix(+row, +column, symbol);\r\n                    changeSymbol('X')\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table>\r\n                {rows}\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table;","import WhoMove from \"./WhoMove\";\r\nexport default WhoMove;","import './WhoMove.css'\r\n\r\ninterface IPropsWhoMove {\r\n    statusGame: string,\r\n    symbol: string\r\n}\r\n\r\nconst WhoMove = ({statusGame, symbol}: IPropsWhoMove) => {\r\n    let text = 'Ваш ход';\r\n    let typeCell = symbol === 'X' ? 'crossCell' : 'circleCell';\r\n    if (statusGame === 'End') {\r\n        text = 'Игра закончена';\r\n        typeCell = symbol === 'X' ? 'circleCell' : 'crossCell';\r\n    }\r\n    return (\r\n        <div className='who_move'>\r\n            <p>{text}</p>\r\n            <div className={typeCell}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WhoMove;","import SizeMatrix from \"./SizeMatrix\";\r\nexport default SizeMatrix;","import './SizeMatrix.css'\r\n\r\ninterface IPropsSizeMatrix {\r\n    changeSizeMatrix: (size: number) => void,\r\n}\r\n\r\nconst SizeMatrix = ({changeSizeMatrix}: IPropsSizeMatrix) => {\r\n    return (\r\n        <div className='size_matrix'>\r\n            <p>Размер поля</p>\r\n            <div className='size_matrix__btns_list'>\r\n                <button onClick={() => changeSizeMatrix(3)}>3</button>\r\n                <button onClick={() => changeSizeMatrix(4)}>4</button>\r\n                <button onClick={() => changeSizeMatrix(5)}>5</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SizeMatrix;","import App from \"./App\";\r\nexport default App;","import { useState } from \"react\"\r\nimport Table from \"../components/Table\";\r\nimport WhoMove from \"../components/WhoMove\";\r\nimport SizeMatrix from \"../components/SizeMatrix\";\r\n\r\nimport \"./App.css\";\r\n\r\nexport default function App(): any {\r\n\r\n    const createMatrix = (size: number): string[][] => {\r\n        const matrix = [];\r\n        for (let i = 0; i < size; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < size; j++) {\r\n                row.push('');\r\n            }\r\n            matrix.push(row);\r\n        }\r\n        return matrix;\r\n    }\r\n    \r\n    let [sizeMatrix, setSizeMatrix] = useState(3);\r\n    let [matrix, setMatrix] = useState(createMatrix(sizeMatrix));\r\n    let [statusGame, setStatusGame] = useState('In progress');\r\n    let [symbol, setSymbol] = useState('X');\r\n\r\n    const changeSizeMatrix = (size: number): void => {\r\n        setSizeMatrix(size);\r\n        const newMatrix = createMatrix(size);\r\n        setMatrix(newMatrix);\r\n        setSymbol('X');\r\n        clearClassList();\r\n        setStatusGame('In progress');\r\n    }\r\n\r\n    const changeMatrix = (i:number, j:number, symbol: string): void => {\r\n        const cloneMatrix = [...matrix];\r\n        cloneMatrix[i][j] = symbol;\r\n        setMatrix(cloneMatrix);\r\n        const result = checkResult(symbol);\r\n        if (result.length > 0) {\r\n            paintCells(result);\r\n            setStatusGame('End');\r\n        }\r\n    }\r\n    const changeSymbol = (item: string): void => {\r\n        setSymbol(item);\r\n    }\r\n\r\n    const checkResult = (symbol: string): string[] => {\r\n        const len = matrix.length;\r\n        let result = [];\r\n        // check rows\r\n        for (let i = 0; i <= len - 1; i++) {\r\n            const counter = matrix[i].filter(item => item === symbol).length;\r\n            if (counter === len) {\r\n                for (let j = 0; j <= len - 1; j++) {\r\n                    const cellNumber = `${i}${j}`;\r\n                    result.push(cellNumber);\r\n                }\r\n                return result\r\n            }\r\n        }\r\n\r\n        // check columns \r\n        for (let i = 0; i <= len - 1; i++) {\r\n            result = [];\r\n            for (let j = 0; j <= len - 1; j++) {\r\n                if (matrix[j][i] === symbol) {\r\n                    const cellNumber = `${j}${i}`\r\n                    result.push(cellNumber);\r\n                }\r\n                if (result.length === len) {\r\n                    return result\r\n                }\r\n            }\r\n        }\r\n\r\n        // check main diagonal\r\n        result = [];\r\n        for (let i = 0; i <= len - 1; i++) {\r\n            if (matrix[i][i] === symbol) {\r\n                const cellNumber = `${i}${i}`\r\n                result.push(cellNumber);\r\n            }\r\n            if (result.length === len) {\r\n                return result\r\n            }\r\n        }\r\n\r\n        // check side diagonal\r\n        result = [];\r\n        for (let i = 0; i <= len - 1; i++) {\r\n            if (matrix[i][len - 1 - i] === symbol) {\r\n                const cellNumber = `${i}${len - 1 - i}`\r\n                result.push(cellNumber);\r\n            }\r\n            if (result.length === len) {\r\n                return result\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    const paintCells = (listCells: string[]): void => {\r\n        listCells.forEach(item => {\r\n            document.querySelectorAll('td').forEach(cell => {\r\n                if (cell.dataset.row === item[0] && cell.dataset.column === item[1]) {\r\n                    cell.style.backgroundColor = '#55dc646b';\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const clearClassList = (): void => {\r\n        const classList = document.querySelectorAll('td');\r\n        classList.forEach(item => {\r\n            item.className = \"\";\r\n            item.style.backgroundColor = ''\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='app'>\r\n            <h1>Крестики нолики</h1>\r\n            <SizeMatrix changeSizeMatrix={changeSizeMatrix}/>\r\n            <WhoMove \r\n                symbol={symbol}\r\n                statusGame={statusGame}/>\r\n            <Table\r\n                statusGame={statusGame}\r\n                matrix={matrix}\r\n                changeMatrix={changeMatrix}\r\n                symbol={symbol}\r\n                changeSymbol={changeSymbol}/>\r\n            <button onClick={() => {\r\n                setMatrix(createMatrix(sizeMatrix));\r\n                setSymbol('X');\r\n                clearClassList();\r\n                setStatusGame('In progress');\r\n            }}>Сбросить</button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}